Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement SEMI
Rule 2     program -> statement SEMI program
Rule 3     statement -> io_statement
Rule 4     statement -> goto_statement
Rule 5     statement -> assignment_statement
Rule 6     statement -> none
Rule 7     io_statement -> input_statement
Rule 8     io_statement -> output_statement
Rule 9     input_statement -> INPUT var
Rule 10    output_statement -> OUTPUT expr
Rule 11    goto_statement -> GOTO expr
Rule 12    assignment_statement -> var EQUALS expr
Rule 13    expr -> term
Rule 14    expr -> term MODULO term
Rule 15    term -> part
Rule 16    term -> part PLUS part
Rule 17    term -> part MINUS part
Rule 18    part -> smallpart
Rule 19    part -> smallpart TIMES smallpart
Rule 20    part -> smallpart DIVIDE smallpart
Rule 21    smallpart -> factor
Rule 22    smallpart -> factor POW factor
Rule 23    factor -> PLUS factor
Rule 24    factor -> MINUS factor
Rule 25    factor -> num
Rule 26    factor -> str
Rule 27    factor -> LPAREN expr RPAREN
Rule 28    factor -> var
Rule 29    var -> ID
Rule 30    num -> NUMBER
Rule 31    str -> STRING
Rule 32    none -> <empty>

Terminals, with rules where they appear

DIVIDE               : 20
EQUALS               : 12
GOTO                 : 11
ID                   : 29
INPUT                : 9
LPAREN               : 27
MINUS                : 17 24
MODULO               : 14
NUMBER               : 30
OUTPUT               : 10
PLUS                 : 16 23
POW                  : 22
RPAREN               : 27
SEMI                 : 1 2
STRING               : 31
TIMES                : 19
error                : 

Nonterminals, with rules where they appear

assignment_statement : 5
expr                 : 10 11 12 27
factor               : 21 22 22 23 24
goto_statement       : 4
input_statement      : 7
io_statement         : 3
none                 : 6
num                  : 25
output_statement     : 8
part                 : 15 16 16 17 17
program              : 2 0
smallpart            : 18 19 19 20 20
statement            : 1 2
str                  : 26
term                 : 13 14 14
var                  : 9 12 28

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement SEMI
    (2) program -> . statement SEMI program
    (3) statement -> . io_statement
    (4) statement -> . goto_statement
    (5) statement -> . assignment_statement
    (6) statement -> . none
    (7) io_statement -> . input_statement
    (8) io_statement -> . output_statement
    (11) goto_statement -> . GOTO expr
    (12) assignment_statement -> . var EQUALS expr
    (32) none -> .
    (9) input_statement -> . INPUT var
    (10) output_statement -> . OUTPUT expr
    (29) var -> . ID

    GOTO            shift and go to state 9
    SEMI            reduce using rule 32 (none -> .)
    INPUT           shift and go to state 11
    OUTPUT          shift and go to state 12
    ID              shift and go to state 13

    program                        shift and go to state 1
    statement                      shift and go to state 2
    io_statement                   shift and go to state 3
    goto_statement                 shift and go to state 4
    assignment_statement           shift and go to state 5
    none                           shift and go to state 6
    input_statement                shift and go to state 7
    output_statement               shift and go to state 8
    var                            shift and go to state 10

state 1

    (0) S' -> program .



state 2

    (1) program -> statement . SEMI
    (2) program -> statement . SEMI program

    SEMI            shift and go to state 14


state 3

    (3) statement -> io_statement .

    SEMI            reduce using rule 3 (statement -> io_statement .)


state 4

    (4) statement -> goto_statement .

    SEMI            reduce using rule 4 (statement -> goto_statement .)


state 5

    (5) statement -> assignment_statement .

    SEMI            reduce using rule 5 (statement -> assignment_statement .)


state 6

    (6) statement -> none .

    SEMI            reduce using rule 6 (statement -> none .)


state 7

    (7) io_statement -> input_statement .

    SEMI            reduce using rule 7 (io_statement -> input_statement .)


state 8

    (8) io_statement -> output_statement .

    SEMI            reduce using rule 8 (io_statement -> output_statement .)


state 9

    (11) goto_statement -> GOTO . expr
    (13) expr -> . term
    (14) expr -> . term MODULO term
    (15) term -> . part
    (16) term -> . part PLUS part
    (17) term -> . part MINUS part
    (18) part -> . smallpart
    (19) part -> . smallpart TIMES smallpart
    (20) part -> . smallpart DIVIDE smallpart
    (21) smallpart -> . factor
    (22) smallpart -> . factor POW factor
    (23) factor -> . PLUS factor
    (24) factor -> . MINUS factor
    (25) factor -> . num
    (26) factor -> . str
    (27) factor -> . LPAREN expr RPAREN
    (28) factor -> . var
    (30) num -> . NUMBER
    (31) str -> . STRING
    (29) var -> . ID

    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 13

    expr                           shift and go to state 15
    term                           shift and go to state 16
    part                           shift and go to state 17
    smallpart                      shift and go to state 20
    factor                         shift and go to state 21
    num                            shift and go to state 22
    str                            shift and go to state 23
    var                            shift and go to state 25

state 10

    (12) assignment_statement -> var . EQUALS expr

    EQUALS          shift and go to state 28


state 11

    (9) input_statement -> INPUT . var
    (29) var -> . ID

    ID              shift and go to state 13

    var                            shift and go to state 29

state 12

    (10) output_statement -> OUTPUT . expr
    (13) expr -> . term
    (14) expr -> . term MODULO term
    (15) term -> . part
    (16) term -> . part PLUS part
    (17) term -> . part MINUS part
    (18) part -> . smallpart
    (19) part -> . smallpart TIMES smallpart
    (20) part -> . smallpart DIVIDE smallpart
    (21) smallpart -> . factor
    (22) smallpart -> . factor POW factor
    (23) factor -> . PLUS factor
    (24) factor -> . MINUS factor
    (25) factor -> . num
    (26) factor -> . str
    (27) factor -> . LPAREN expr RPAREN
    (28) factor -> . var
    (30) num -> . NUMBER
    (31) str -> . STRING
    (29) var -> . ID

    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 13

    expr                           shift and go to state 30
    term                           shift and go to state 16
    part                           shift and go to state 17
    smallpart                      shift and go to state 20
    factor                         shift and go to state 21
    num                            shift and go to state 22
    str                            shift and go to state 23
    var                            shift and go to state 25

state 13

    (29) var -> ID .

    EQUALS          reduce using rule 29 (var -> ID .)
    POW             reduce using rule 29 (var -> ID .)
    TIMES           reduce using rule 29 (var -> ID .)
    DIVIDE          reduce using rule 29 (var -> ID .)
    PLUS            reduce using rule 29 (var -> ID .)
    MINUS           reduce using rule 29 (var -> ID .)
    MODULO          reduce using rule 29 (var -> ID .)
    SEMI            reduce using rule 29 (var -> ID .)
    RPAREN          reduce using rule 29 (var -> ID .)


state 14

    (1) program -> statement SEMI .
    (2) program -> statement SEMI . program
    (1) program -> . statement SEMI
    (2) program -> . statement SEMI program
    (3) statement -> . io_statement
    (4) statement -> . goto_statement
    (5) statement -> . assignment_statement
    (6) statement -> . none
    (7) io_statement -> . input_statement
    (8) io_statement -> . output_statement
    (11) goto_statement -> . GOTO expr
    (12) assignment_statement -> . var EQUALS expr
    (32) none -> .
    (9) input_statement -> . INPUT var
    (10) output_statement -> . OUTPUT expr
    (29) var -> . ID

    $end            reduce using rule 1 (program -> statement SEMI .)
    GOTO            shift and go to state 9
    SEMI            reduce using rule 32 (none -> .)
    INPUT           shift and go to state 11
    OUTPUT          shift and go to state 12
    ID              shift and go to state 13

    statement                      shift and go to state 2
    program                        shift and go to state 31
    io_statement                   shift and go to state 3
    goto_statement                 shift and go to state 4
    assignment_statement           shift and go to state 5
    none                           shift and go to state 6
    input_statement                shift and go to state 7
    output_statement               shift and go to state 8
    var                            shift and go to state 10

state 15

    (11) goto_statement -> GOTO expr .

    SEMI            reduce using rule 11 (goto_statement -> GOTO expr .)


state 16

    (13) expr -> term .
    (14) expr -> term . MODULO term

    SEMI            reduce using rule 13 (expr -> term .)
    RPAREN          reduce using rule 13 (expr -> term .)
    MODULO          shift and go to state 32


state 17

    (15) term -> part .
    (16) term -> part . PLUS part
    (17) term -> part . MINUS part

    MODULO          reduce using rule 15 (term -> part .)
    SEMI            reduce using rule 15 (term -> part .)
    RPAREN          reduce using rule 15 (term -> part .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34


state 18

    (23) factor -> PLUS . factor
    (23) factor -> . PLUS factor
    (24) factor -> . MINUS factor
    (25) factor -> . num
    (26) factor -> . str
    (27) factor -> . LPAREN expr RPAREN
    (28) factor -> . var
    (30) num -> . NUMBER
    (31) str -> . STRING
    (29) var -> . ID

    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 13

    factor                         shift and go to state 35
    num                            shift and go to state 22
    str                            shift and go to state 23
    var                            shift and go to state 25

state 19

    (24) factor -> MINUS . factor
    (23) factor -> . PLUS factor
    (24) factor -> . MINUS factor
    (25) factor -> . num
    (26) factor -> . str
    (27) factor -> . LPAREN expr RPAREN
    (28) factor -> . var
    (30) num -> . NUMBER
    (31) str -> . STRING
    (29) var -> . ID

    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 13

    factor                         shift and go to state 36
    num                            shift and go to state 22
    str                            shift and go to state 23
    var                            shift and go to state 25

state 20

    (18) part -> smallpart .
    (19) part -> smallpart . TIMES smallpart
    (20) part -> smallpart . DIVIDE smallpart

    PLUS            reduce using rule 18 (part -> smallpart .)
    MINUS           reduce using rule 18 (part -> smallpart .)
    MODULO          reduce using rule 18 (part -> smallpart .)
    SEMI            reduce using rule 18 (part -> smallpart .)
    RPAREN          reduce using rule 18 (part -> smallpart .)
    TIMES           shift and go to state 37
    DIVIDE          shift and go to state 38


state 21

    (21) smallpart -> factor .
    (22) smallpart -> factor . POW factor

    TIMES           reduce using rule 21 (smallpart -> factor .)
    DIVIDE          reduce using rule 21 (smallpart -> factor .)
    PLUS            reduce using rule 21 (smallpart -> factor .)
    MINUS           reduce using rule 21 (smallpart -> factor .)
    MODULO          reduce using rule 21 (smallpart -> factor .)
    SEMI            reduce using rule 21 (smallpart -> factor .)
    RPAREN          reduce using rule 21 (smallpart -> factor .)
    POW             shift and go to state 39


state 22

    (25) factor -> num .

    POW             reduce using rule 25 (factor -> num .)
    TIMES           reduce using rule 25 (factor -> num .)
    DIVIDE          reduce using rule 25 (factor -> num .)
    PLUS            reduce using rule 25 (factor -> num .)
    MINUS           reduce using rule 25 (factor -> num .)
    MODULO          reduce using rule 25 (factor -> num .)
    SEMI            reduce using rule 25 (factor -> num .)
    RPAREN          reduce using rule 25 (factor -> num .)


state 23

    (26) factor -> str .

    POW             reduce using rule 26 (factor -> str .)
    TIMES           reduce using rule 26 (factor -> str .)
    DIVIDE          reduce using rule 26 (factor -> str .)
    PLUS            reduce using rule 26 (factor -> str .)
    MINUS           reduce using rule 26 (factor -> str .)
    MODULO          reduce using rule 26 (factor -> str .)
    SEMI            reduce using rule 26 (factor -> str .)
    RPAREN          reduce using rule 26 (factor -> str .)


state 24

    (27) factor -> LPAREN . expr RPAREN
    (13) expr -> . term
    (14) expr -> . term MODULO term
    (15) term -> . part
    (16) term -> . part PLUS part
    (17) term -> . part MINUS part
    (18) part -> . smallpart
    (19) part -> . smallpart TIMES smallpart
    (20) part -> . smallpart DIVIDE smallpart
    (21) smallpart -> . factor
    (22) smallpart -> . factor POW factor
    (23) factor -> . PLUS factor
    (24) factor -> . MINUS factor
    (25) factor -> . num
    (26) factor -> . str
    (27) factor -> . LPAREN expr RPAREN
    (28) factor -> . var
    (30) num -> . NUMBER
    (31) str -> . STRING
    (29) var -> . ID

    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 13

    expr                           shift and go to state 40
    term                           shift and go to state 16
    part                           shift and go to state 17
    smallpart                      shift and go to state 20
    factor                         shift and go to state 21
    num                            shift and go to state 22
    str                            shift and go to state 23
    var                            shift and go to state 25

state 25

    (28) factor -> var .

    POW             reduce using rule 28 (factor -> var .)
    TIMES           reduce using rule 28 (factor -> var .)
    DIVIDE          reduce using rule 28 (factor -> var .)
    PLUS            reduce using rule 28 (factor -> var .)
    MINUS           reduce using rule 28 (factor -> var .)
    MODULO          reduce using rule 28 (factor -> var .)
    SEMI            reduce using rule 28 (factor -> var .)
    RPAREN          reduce using rule 28 (factor -> var .)


state 26

    (30) num -> NUMBER .

    POW             reduce using rule 30 (num -> NUMBER .)
    TIMES           reduce using rule 30 (num -> NUMBER .)
    DIVIDE          reduce using rule 30 (num -> NUMBER .)
    PLUS            reduce using rule 30 (num -> NUMBER .)
    MINUS           reduce using rule 30 (num -> NUMBER .)
    MODULO          reduce using rule 30 (num -> NUMBER .)
    SEMI            reduce using rule 30 (num -> NUMBER .)
    RPAREN          reduce using rule 30 (num -> NUMBER .)


state 27

    (31) str -> STRING .

    POW             reduce using rule 31 (str -> STRING .)
    TIMES           reduce using rule 31 (str -> STRING .)
    DIVIDE          reduce using rule 31 (str -> STRING .)
    PLUS            reduce using rule 31 (str -> STRING .)
    MINUS           reduce using rule 31 (str -> STRING .)
    MODULO          reduce using rule 31 (str -> STRING .)
    SEMI            reduce using rule 31 (str -> STRING .)
    RPAREN          reduce using rule 31 (str -> STRING .)


state 28

    (12) assignment_statement -> var EQUALS . expr
    (13) expr -> . term
    (14) expr -> . term MODULO term
    (15) term -> . part
    (16) term -> . part PLUS part
    (17) term -> . part MINUS part
    (18) part -> . smallpart
    (19) part -> . smallpart TIMES smallpart
    (20) part -> . smallpart DIVIDE smallpart
    (21) smallpart -> . factor
    (22) smallpart -> . factor POW factor
    (23) factor -> . PLUS factor
    (24) factor -> . MINUS factor
    (25) factor -> . num
    (26) factor -> . str
    (27) factor -> . LPAREN expr RPAREN
    (28) factor -> . var
    (30) num -> . NUMBER
    (31) str -> . STRING
    (29) var -> . ID

    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 13

    var                            shift and go to state 25
    expr                           shift and go to state 41
    term                           shift and go to state 16
    part                           shift and go to state 17
    smallpart                      shift and go to state 20
    factor                         shift and go to state 21
    num                            shift and go to state 22
    str                            shift and go to state 23

state 29

    (9) input_statement -> INPUT var .

    SEMI            reduce using rule 9 (input_statement -> INPUT var .)


state 30

    (10) output_statement -> OUTPUT expr .

    SEMI            reduce using rule 10 (output_statement -> OUTPUT expr .)


state 31

    (2) program -> statement SEMI program .

    $end            reduce using rule 2 (program -> statement SEMI program .)


state 32

    (14) expr -> term MODULO . term
    (15) term -> . part
    (16) term -> . part PLUS part
    (17) term -> . part MINUS part
    (18) part -> . smallpart
    (19) part -> . smallpart TIMES smallpart
    (20) part -> . smallpart DIVIDE smallpart
    (21) smallpart -> . factor
    (22) smallpart -> . factor POW factor
    (23) factor -> . PLUS factor
    (24) factor -> . MINUS factor
    (25) factor -> . num
    (26) factor -> . str
    (27) factor -> . LPAREN expr RPAREN
    (28) factor -> . var
    (30) num -> . NUMBER
    (31) str -> . STRING
    (29) var -> . ID

    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 13

    term                           shift and go to state 42
    part                           shift and go to state 17
    smallpart                      shift and go to state 20
    factor                         shift and go to state 21
    num                            shift and go to state 22
    str                            shift and go to state 23
    var                            shift and go to state 25

state 33

    (16) term -> part PLUS . part
    (18) part -> . smallpart
    (19) part -> . smallpart TIMES smallpart
    (20) part -> . smallpart DIVIDE smallpart
    (21) smallpart -> . factor
    (22) smallpart -> . factor POW factor
    (23) factor -> . PLUS factor
    (24) factor -> . MINUS factor
    (25) factor -> . num
    (26) factor -> . str
    (27) factor -> . LPAREN expr RPAREN
    (28) factor -> . var
    (30) num -> . NUMBER
    (31) str -> . STRING
    (29) var -> . ID

    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 13

    part                           shift and go to state 43
    smallpart                      shift and go to state 20
    factor                         shift and go to state 21
    num                            shift and go to state 22
    str                            shift and go to state 23
    var                            shift and go to state 25

state 34

    (17) term -> part MINUS . part
    (18) part -> . smallpart
    (19) part -> . smallpart TIMES smallpart
    (20) part -> . smallpart DIVIDE smallpart
    (21) smallpart -> . factor
    (22) smallpart -> . factor POW factor
    (23) factor -> . PLUS factor
    (24) factor -> . MINUS factor
    (25) factor -> . num
    (26) factor -> . str
    (27) factor -> . LPAREN expr RPAREN
    (28) factor -> . var
    (30) num -> . NUMBER
    (31) str -> . STRING
    (29) var -> . ID

    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 13

    part                           shift and go to state 44
    smallpart                      shift and go to state 20
    factor                         shift and go to state 21
    num                            shift and go to state 22
    str                            shift and go to state 23
    var                            shift and go to state 25

state 35

    (23) factor -> PLUS factor .

    POW             reduce using rule 23 (factor -> PLUS factor .)
    TIMES           reduce using rule 23 (factor -> PLUS factor .)
    DIVIDE          reduce using rule 23 (factor -> PLUS factor .)
    PLUS            reduce using rule 23 (factor -> PLUS factor .)
    MINUS           reduce using rule 23 (factor -> PLUS factor .)
    MODULO          reduce using rule 23 (factor -> PLUS factor .)
    SEMI            reduce using rule 23 (factor -> PLUS factor .)
    RPAREN          reduce using rule 23 (factor -> PLUS factor .)


state 36

    (24) factor -> MINUS factor .

    POW             reduce using rule 24 (factor -> MINUS factor .)
    TIMES           reduce using rule 24 (factor -> MINUS factor .)
    DIVIDE          reduce using rule 24 (factor -> MINUS factor .)
    PLUS            reduce using rule 24 (factor -> MINUS factor .)
    MINUS           reduce using rule 24 (factor -> MINUS factor .)
    MODULO          reduce using rule 24 (factor -> MINUS factor .)
    SEMI            reduce using rule 24 (factor -> MINUS factor .)
    RPAREN          reduce using rule 24 (factor -> MINUS factor .)


state 37

    (19) part -> smallpart TIMES . smallpart
    (21) smallpart -> . factor
    (22) smallpart -> . factor POW factor
    (23) factor -> . PLUS factor
    (24) factor -> . MINUS factor
    (25) factor -> . num
    (26) factor -> . str
    (27) factor -> . LPAREN expr RPAREN
    (28) factor -> . var
    (30) num -> . NUMBER
    (31) str -> . STRING
    (29) var -> . ID

    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 13

    smallpart                      shift and go to state 45
    factor                         shift and go to state 21
    num                            shift and go to state 22
    str                            shift and go to state 23
    var                            shift and go to state 25

state 38

    (20) part -> smallpart DIVIDE . smallpart
    (21) smallpart -> . factor
    (22) smallpart -> . factor POW factor
    (23) factor -> . PLUS factor
    (24) factor -> . MINUS factor
    (25) factor -> . num
    (26) factor -> . str
    (27) factor -> . LPAREN expr RPAREN
    (28) factor -> . var
    (30) num -> . NUMBER
    (31) str -> . STRING
    (29) var -> . ID

    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 13

    smallpart                      shift and go to state 46
    factor                         shift and go to state 21
    num                            shift and go to state 22
    str                            shift and go to state 23
    var                            shift and go to state 25

state 39

    (22) smallpart -> factor POW . factor
    (23) factor -> . PLUS factor
    (24) factor -> . MINUS factor
    (25) factor -> . num
    (26) factor -> . str
    (27) factor -> . LPAREN expr RPAREN
    (28) factor -> . var
    (30) num -> . NUMBER
    (31) str -> . STRING
    (29) var -> . ID

    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    LPAREN          shift and go to state 24
    NUMBER          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 13

    factor                         shift and go to state 47
    num                            shift and go to state 22
    str                            shift and go to state 23
    var                            shift and go to state 25

state 40

    (27) factor -> LPAREN expr . RPAREN

    RPAREN          shift and go to state 48


state 41

    (12) assignment_statement -> var EQUALS expr .

    SEMI            reduce using rule 12 (assignment_statement -> var EQUALS expr .)


state 42

    (14) expr -> term MODULO term .

    SEMI            reduce using rule 14 (expr -> term MODULO term .)
    RPAREN          reduce using rule 14 (expr -> term MODULO term .)


state 43

    (16) term -> part PLUS part .

    MODULO          reduce using rule 16 (term -> part PLUS part .)
    SEMI            reduce using rule 16 (term -> part PLUS part .)
    RPAREN          reduce using rule 16 (term -> part PLUS part .)


state 44

    (17) term -> part MINUS part .

    MODULO          reduce using rule 17 (term -> part MINUS part .)
    SEMI            reduce using rule 17 (term -> part MINUS part .)
    RPAREN          reduce using rule 17 (term -> part MINUS part .)


state 45

    (19) part -> smallpart TIMES smallpart .

    PLUS            reduce using rule 19 (part -> smallpart TIMES smallpart .)
    MINUS           reduce using rule 19 (part -> smallpart TIMES smallpart .)
    MODULO          reduce using rule 19 (part -> smallpart TIMES smallpart .)
    SEMI            reduce using rule 19 (part -> smallpart TIMES smallpart .)
    RPAREN          reduce using rule 19 (part -> smallpart TIMES smallpart .)


state 46

    (20) part -> smallpart DIVIDE smallpart .

    PLUS            reduce using rule 20 (part -> smallpart DIVIDE smallpart .)
    MINUS           reduce using rule 20 (part -> smallpart DIVIDE smallpart .)
    MODULO          reduce using rule 20 (part -> smallpart DIVIDE smallpart .)
    SEMI            reduce using rule 20 (part -> smallpart DIVIDE smallpart .)
    RPAREN          reduce using rule 20 (part -> smallpart DIVIDE smallpart .)


state 47

    (22) smallpart -> factor POW factor .

    TIMES           reduce using rule 22 (smallpart -> factor POW factor .)
    DIVIDE          reduce using rule 22 (smallpart -> factor POW factor .)
    PLUS            reduce using rule 22 (smallpart -> factor POW factor .)
    MINUS           reduce using rule 22 (smallpart -> factor POW factor .)
    MODULO          reduce using rule 22 (smallpart -> factor POW factor .)
    SEMI            reduce using rule 22 (smallpart -> factor POW factor .)
    RPAREN          reduce using rule 22 (smallpart -> factor POW factor .)


state 48

    (27) factor -> LPAREN expr RPAREN .

    POW             reduce using rule 27 (factor -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 27 (factor -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 27 (factor -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 27 (factor -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 27 (factor -> LPAREN expr RPAREN .)
    MODULO          reduce using rule 27 (factor -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 27 (factor -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 27 (factor -> LPAREN expr RPAREN .)

